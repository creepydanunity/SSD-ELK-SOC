input {
  pipeline {
    address => "backend_logs"
  }

  beats {
    host => "0.0.0.0"
    port => 5044
  }
}
 
filter {

  if "cache_hit" in [tags] {
    ruby {
      init => "
        require 'set';
        $IP_CACHE     ||= Set.new;
        $FILE_CACHE   ||= Set.new;
        $DOMAIN_CACHE ||= Set.new;
        $EMAIL_CACHE  ||= Set.new;
      "
      code => "
        if (c = event.get('[cache][ipv4]'))
          $IP_CACHE.add(c['indicator'])
        elsif (c = event.get('[cache][file]'))
          $FILE_CACHE.add(c['indicator'])
        elsif (c = event.get('[cache][domain]'))
          $DOMAIN_CACHE.add(c['indicator'])
        elsif (c = event.get('[cache][email]'))
          $EMAIL_CACHE.add(c['indicator'])
        end
        event.cancel
      "
    }
  } else { 
    if [message]  =~ /.*rhost=.*/ {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{DATA:host}.*rhost=%{IP:rhost}" }
      }
      mutate { add_field => { "[source][ip]" => "%{rhost}" } }
    }
    
    if "test_logs" in [tags] {
      grok {
        match => { "message" =>
          "%{TIMESTAMP_ISO8601:log_timestamp} - %{IP:client_ip} - %{GREEDYDATA:flask_message}"
        }
      }

      mutate {
        rename => {
          "log_timestamp" => "@timestamp"
          "flask_message" => "message"
        }
        add_field => { "[source][ip]" => "%{client_ip}" }
      }

      mutate {
        gsub => [
          "message", "^.* - ", ""
        ]
      }

      json {
        source => "message"
        target => "parsed"
        remove_field => ["message"]
      }

      if [parsed][domain] {
        mutate {
          rename => { "[parsed][domain]" => "domain" }
          add_tag  => ["has_domain"]
        }
      }

      if [parsed][email] {
        mutate {
          rename => { "[parsed][email]" => "email" }
          add_tag  => ["has_email"]
        }
      }
    }
    else if "backend_logs" in [tags] {
      grok {
        match => { "message" =>
          "%{TIMESTAMP_ISO8601:log_timestamp} - %{IP:client_ip} - %{DATA:logger_name} - %{LOGLEVEL:level} - %{GREEDYDATA:flask_message}"
        }
      }

      date {
        match   => [ "log_timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
      }
      mutate {
        remove_field => [ "log_timestamp" ]
      }

      mutate {
        rename => {
          "flask_message" => "message"
        }
        add_field => { "[source][ip]" => "%{client_ip}" }
      }

      mutate {
        gsub => [
          "message", "^(?:.* - )+", ""
        ]
      }

      if [message] =~ /(?i:^payload: \d+ bytes$)/ {
        grok {
          match => {
            "message" => "^payload: %{NUMBER:bytes:int} bytes$"
          }
        }
      }
    }

    if [message] =~ /(?i:(\bUNION\b.*\bSELECT\b|\bOR\s+1=1\b|--\s*$|;--))/ {
      mutate { add_tag => ["malicious_sql_injection"] }
    }

    if [message] =~ /<\s*script\b.*?>.*?<\s*\/\s*script\s*>/ or [message] =~ /on\w+\s*=\s*".*?"/ {
      mutate { add_tag => ["malicious_xss"] }
    }

    if [bytes] and [bytes] > 10240 {
      mutate { add_tag => ["potential_buffer_overflow"] }
    }

    if [source][ip] {
      ruby {
        code => '
          ip = event.get("[source][ip]")
          if ip && $IP_CACHE.include?(ip)
            event.tag("malicious_ip")
          end
        '
      }
    }

    if [domain] {
      ruby {
        code => '
          dom = event.get("domain")
          event.tag("malicious_domain") if dom && $DOMAIN_CACHE.include?(dom)
        '
      }
    }

    if [email] {
      ruby {
        code => '
          mail = event.get("email")
          event.tag("malicious_email") if mail && $EMAIL_CACHE.include?(mail)
        '
      }
    }

    mutate {
      remove_field => ["indicators_ipv4", "indicators_file", "indicators_domain", "indicators_email"]
    }
  
    if [event][module] == "system" and [event][dataset] == "system.auth" {
      if [message] =~ /sudo:\s+\w+\s*:\s+TTY=/ {
        mutate { add_tag => ["sudo_usage"] }
      }
  
      if [message] =~ /sudo:.*authentication failure.*/ or [message] =~ /sudo:.*incorrect password.*/ {
        mutate { add_tag => ["sudo_auth_failure"] }
      }    

      mutate {
        lowercase => [ "user.name", "user.id" ]
      }
    }
  
    if [log][file][path] == "/var/log/ufw.log" {
      if "BLOCK" in [message] or "DENIED" in [message] {
        mutate { add_tag => ["firewall_denied_or_blocked"] }
      }
    }

    if "ufw" in [event][module] {
      if [bytes] > 1000000 {
          mutate { add_tag => ["high_traffic"] }
      }
    }

    if [client_ip] {
      geoip {
        source => "client_ip"
        database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
        target => "geo"
      }
    }

    mutate { remove_field => ["agent", "input", "fileset", "ecs", "log"] }

    mutate { remove_tag => ["beats_input_codec_plain_applied", "_mutate_error", "_geoip_lookup_failure"] }
  }
}
 
output {
  stdout { codec => rubydebug }  
  if "malicious_sql_injection" in [tags] or
     "malicious_xss" in [tags] or
     "potential_buffer_overflow" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }

  if "sudo_usage" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "admin-logs-%{+YYYY.MM.dd}"
    }
  }

  if "sudo_auth_failure" in [tags] or "high_traffic" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "dangerous-logs-%{+YYYY.MM.dd}"
    }
  }
  
  if "malicious_ip" in [tags] or
     "malicious_file" in [tags] or
     "malicious_domain" in [tags] or
     "malicious_email" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }
}
