input {
  beats {
    port => 5044
  }
}
 
filter {
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }  
 
  if [message]  =~ /.*rhost=.*/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{DATA:host}.*rhost=%{IP:rhost}" }
    }
    mutate { add_field => { "[source][ip]" => "%{rhost}" } }
  }
 
  if [source][ip] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-otx-*"
      query => '{
        "query": {
          "nested": {
            "path": "indicator_ipv4",
            "query": {
              "term": {
                "indicator_ipv4.indicator": "%{[source][ip]}"
              }
            }
          }
        },
        "_source": ["indicator_ipv4.indicator", "indicator_ipv4.name", "indicator_ipv4.indicator_id"]
      }'
      fields => ["indicator_ipv4.indicator", "indicator_ipv4.name", "indicator_ipv4.indicator_id"]
    }
  }
 
  ruby {
    code => "
      indicators = event.get('indicator_ipv4')
      
      if indicators
        indicators.each do |indicator|
          if indicator['indicator'] == event.get('[source][ip]')
            event.tag('malicious_ip')
            event.set('matched_indicator', indicator)
          end
        end
      end
    "
  }
  
  if [file][path] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-otx-*"
      query => '{
        "query": {
          "nested": {
            "path": "indicators_file",
            "query": {
              "term": {
                "indicators_file.indicator": "%{[file][path]}"
              }
            }
          }
        },
        "_source": ["indicators_file.indicator", "indicators_file.name", "indicators_file.id"]
      }'
      fields => ["indicators_file.indicator", "indicators_file.name", "indicators_file.id"]
    }
  }

  ruby {
    code => "
      file_indicators = event.get('indicators_file')
      
      if file_indicators
        file_indicators.each do |indicator|
          if indicator['indicator'] == event.get('[file][path]')
            event.tag('malicious_file')
            event.set('matched_indicator', indicator)
          end
        end
      end
    "
  }

  if [domain] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-otx-*"
      query => '{
        "query": {
          "nested": {
            "path": "indicators_domain",
            "query": {
              "term": {
                "indicators_domain.indicator": "%{[domain]}"
              }
            }
          }
        },
        "_source": ["indicators_domain.indicator", "indicators_domain.name", "indicators_domain.id"]
      }'
      fields => ["indicators_domain.indicator", "indicators_domain.name", "indicators_domain.id"]
    }
  }

  ruby {
    code => "
      domain_indicators = event.get('indicators_domain')
      
      if domain_indicators
        domain_indicators.each do |indicator|
          if indicator['indicator'] == event.get('[domain]')
            event.tag('malicious_domain')
            event.set('matched_indicator', indicator)
          end
        end
      end
    "
  }

  if [email] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "threat-intel-otx-*"
      query => '{
        "query": {
          "nested": {
            "path": "indicators_email",
            "query": {
              "term": {
                "indicators_email.indicator": "%{[email]}"
              }
            }
          }
        },
        "_source": ["indicators_email.indicator", "indicators_email.name", "indicators_email.id"]
      }'
      fields => ["indicators_email.indicator", "indicators_email.name", "indicators_email.id"]
    }
  }

  ruby {
    code => "
      email_indicators = event.get('indicators_email')
      
      if email_indicators
        email_indicators.each do |indicator|
          if indicator['indicator'] == event.get('[email]')
            event.tag('malicious_email')
            event.set('matched_indicator', indicator)
          end
        end
      end
    "
  }

  mutate {
    remove_field => ["indicators_ipv4", "indicators_file", "indicators_domain", "indicators_email"]
  }
 
  if [event][module] == "system" and [event][dataset] == "system.auth" {
    if [message] =~ /sudo:\s+\w+\s*:\s+TTY=/ {
      mutate { add_tag => ["sudo_usage"] }
    }
 
    if [message] =~ /sudo:.*authentication failure.*/ or [message] =~ /sudo:.*incorrect password.*/ {
      mutate { add_tag => ["sudo_auth_failure"] }
    }    

    mutate {
      lowercase => [ "user.name", "user.id" ]
    }
  }
 
  if [log][file][path] == "/var/log/ufw.log" {
    if "BLOCK" in [message] or "DENIED" in [message] {
      mutate { add_tag => ["firewall_denied_or_blocked"] }
    }
  }

 if "ufw" in [event][module] {
        if [bytes] > 1000000 {
            mutate { add_tag => ["high_traffic"] }
        }
    }

  if [source][ip] {
    geoip {
      source => "[source][ip]"
      database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
      target => "geo"
    }

    mutate {
      add_field => {
        "[geo][country_name]" => "%{[geo][country_name]}"
        "[geo][city_name]"    => "%{[geo][city_name]}"
        "[geo][latitude]"     => "%{[geo][location][lat]}"
        "[geo][longitude]"    => "%{[geo][location][lon]}"
      }
    }
  }

  mutate {
    remove_field => ["agent", "input", "fileset", "ecs", "log"]
  }
 
  mutate { remove_tag => ["beats_input_codec_plain_applied"] }
 
}
 
output {
  if "sudo_usage" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "admin-logs-%{+YYYY.MM.dd}"
    }
  }

  if "sudo_auth_failure" in [tags] or "high_traffic" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "dangerous-logs-%{+YYYY.MM.dd}"
    }
  }
  
  if "malicious_ip" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }

  if "malicious_file" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }

  if "malicious_domain" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }

  if "malicious_email" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }
}
