input {
  http_poller {
    urls => {
      otx_pulses => {
        method           => "get"
        url              => "https://otx.alienvault.com/api/v1/pulses/subscribed?limit=100"
        headers => {
          "X-OTX-API-KEY" => "07af3a46cbd66475aaecba02aa3b1218a7e36ba414edc60cc60d1a1389c2ae24"
        }
      }
    }
    codec           => "json"
    request_timeout => 60
    schedule        => { every => "5m" }
  }
}

filter {
  if [results] {
    ruby {
      init   => "require 'json'"
      code   => "
        ipv4_list   = []
        file_list   = []
        domain_list = []
        email_list  = []

        page = event.to_hash
          page['results'].each do |pulse|
            pulse['indicators'].each do |i|
              rec = {
                'indicator' => i['indicator'],
                'type'      => i['type'],
                'pulse_name'=> pulse['name'],
                'pulse_id'  => pulse['id']
              }
              case i['type']
              when 'IPv4' then       ipv4_list   << rec
              when /FileHash/ then   file_list   << rec
              when 'domain','URL','hostname' then domain_list << rec
              when 'email' then      email_list  << rec
              end
            end
          end
 
          {
            'IPv4'     => ipv4_list,
            'FileHash' => file_list,
            'domain'   => domain_list,
            'email'    => email_list
          }.each do |type, list|
            list.each do |rec|
              clone = event.clone
              clone.set(\"[cache][\#{type}]\", rec)
              clone.tag('cache_hit')
              yield(clone)
            end
          end
 
          
          event.cancel
      "
    }

    mutate {
      remove_field => [ "headers", "request", "response", "results", "next", "response_headers" ]
    }
  }
}

output {
  pipeline {
    send_to => ["backend_logs"]
  }

  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "threat-intel-otx-%{+YYYY.MM.dd}"
  }
}