services:
  elasticsearch:
    build: .
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xmx2g -Xms2g"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - soc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 15s
      retries: 5
      start_period: 10s
      timeout: 20s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: logstash
    environment:
      - LS_PATH_CONF=/etc/logstash/config
    env_file:
      - .env
    volumes:
      - ./config/logstash:/usr/share/logstash/config:ro
      - ./data/logstash:/var/log/logstash
      - ./config/geo/GeoLite2-City.mmdb:/usr/share/GeoIP/GeoLite2-City.mmdb:ro
    ports:
      - "5044:5044"
    networks:
      - soc_network
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5045:5601"
    networks:
      - soc_network
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.9.0
    container_name: filebeat
    command: [ "filebeat", "-e", "--strict.perms=false" ]
    volumes:
      - ./config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - log-volume:/var/log:ro
    environment:
      - OUTPUT_HOST=logstash:5044
    networks:
      - soc_network
    depends_on:
      - logstash

  elastalert:
    image: ghcr.io/jertel/elastalert2/elastalert2:2
    env_file:
      - .env
    container_name: elastalert
    restart: unless-stopped
    volumes:
      - ./config/elastalert/config.yaml:/opt/elastalert/config.yaml:ro
      - ./config/elastalert/rules:/opt/elastalert/rules:ro
    networks:
      - soc_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: ["/opt/elastalert/run.sh"]

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: vuln_app
      POSTGRES_PASSWORD: vuln_app
      POSTGRES_DB: onlinestore
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/back/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vuln_app -d onlinestore"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  backend:
    build: ./app/back
    ports:
      - "5000:5000"
    environment:
      FLASK_APP: app.py
      SQLALCHEMY_DATABASE_URI: postgresql://vuln_app:vuln_app@db:5432/onlinestore
    volumes:
      - log-volume:/var/log
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build: 
      context: ./app/front
      dockerfile: Dockerfile
    entrypoint: []
    command: ["bash", "-lc", "npm start"]
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  log-volume:
  postgres_data:

networks:
  soc_network:
    driver: bridge
    
  app-network:
    driver: bridge
